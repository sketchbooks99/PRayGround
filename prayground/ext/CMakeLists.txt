#
# Copyright (c) 2019, NVIDIA CORPORATION. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#  * Neither the name of NVIDIA CORPORATION nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
# OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

find_package( OpenGL REQUIRED ) 

if (BUILD_SHARED_LIBS AND UNIX)
    set(GLFW_LIB_NAME glfw)
else()
    set(GLFW_LIB_NAME glfw3)
endif()

# Filter out warnings that cause problems with GLFW.
if( WARNINGS_AS_ERRORS AND (USING_GNU_CXX OR USING_CLANG_CXX))
  string( REPLACE "-Wdeclaration-after-statement" "" filtered_c_flags ${CMAKE_C_FLAGS} )
  string( REPLACE "-Wsign-compare" "" filtered_c_flags ${filtered_c_flags} )
  push_variable( CMAKE_C_FLAGS "${filtered_c_flags} -Wno-format-truncation -Wno-deprecated" )
endif()

add_subdirectory(glfw)
set_property(TARGET glfw PROPERTY C_STANDARD 99)
if (WARNING_AS_ERRORS AND (USING_GNU_CXX OR USING_CLANG_CXX))
    pop_variable(CMAKE_C_FLAGS)
endif()

add_subdirectory(imgui)

add_library(glad SHARED 
    KHR/khrplatform.h 
    glad/glad.c 
    glad/glad.h
)
target_compile_definitions( glad 
    PRIVATE GLAD_GLAPI_EXPORT_BUILD
    PUBLIC GLAD_GLAPI_EXPORT
)
target_include_directories(glad PUBLIC .)
target_link_libraries(glad PUBLIC ${OPENGL_LIBRARIES})

add_subdirectory(nanovdb)

# Build OpenUSD as static library
set(PXR_BUILD_MONOLITHIC ON)
add_subdirectory(OpenUSD)

set_property( TARGET glad PROPERTY FOLDER ${OPTIX_IDE_FOLDER} )
set_property( TARGET glfw PROPERTY FOLDER ${OPTIX_IDE_FOLDER} )
set_property( TARGET imgui PROPERTY FOLDER ${OPTIX_IDE_FOLDER} )